generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                 String              @id @default(cuid())
    name               String?
    email              String?             @unique
    emailVerified      DateTime?
    image              String?
    accounts           Account[]
    sessions           Session[]
    customerId         String?
    subscriptionId     String?
    subscriptionStatus SubscriptionStatus?
    productId          String?
    currentPeriodStart Int?
    currentPeriodEnd   Int?
    cancelAt           Int?
    admin              Boolean             @default(false)
    gptModel           GptModel            @default(gpt35turbo)
    genPrompts         Boolean             @default(true)

    tokenCount     Int      @default(0)
    trialStartedAt DateTime @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model StripeEvent {
    id               String   @id @unique
    api_version      String?
    data             Json
    request          Json?
    type             String
    object           String
    account          String?
    created          DateTime
    livemode         Boolean
    pending_webhooks Int
}

model UserMessage {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    url       String
    text      String
}

enum SubscriptionStatus {
    incomplete
    incomplete_expired
    trialing
    active
    past_due
    canceled
    unpaid
    paused
}

enum GptModel {
    gpt35turbo
    gpt4
}
